import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫")],
        [KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç")],
        [KeyboardButton("üö¢ –ó–∞–∫–∞–∑ –∏–∑ –ö–∏—Ç–∞—è"), KeyboardButton("üì¶ –û–ø—Ç/–¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥")]
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ShadyChinaBot! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥":
        kb = [
            [InlineKeyboardButton("üëö –ö–∞—Ç–∞–ª–æ–≥ —Å –æ–¥–µ–∂–¥–æ–π", callback_data='catalog_clothes')],
            [InlineKeyboardButton("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç", callback_data='catalog_guarantee')],
            [InlineKeyboardButton("üö¢ –ó–∞–∫–∞–∑ –∏–∑ –ö–∏—Ç–∞—è", callback_data='catalog_order')],
            [InlineKeyboardButton("üì¶ –û–ø—Ç/–¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥", callback_data='catalog_wholesale')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_main')]
        ]
        await update.message.reply_text(
            "üì¶ *–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥:*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(kb)
        )
    elif text == "ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫":
        await update.message.reply_text("AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text("–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @shadychina_support")
    elif text == "üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç":
        await update.message.reply_text("–ì–∞—Ä–∞–Ω—Ç: https://t.me/shadychina_guarantee")
    elif text == "üö¢ –ó–∞–∫–∞–∑ –∏–∑ –ö–∏—Ç–∞—è":
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ üì¶ –ö–∞—Ç–∞–ª–æ–≥ ‚Üí –ó–∞–∫–∞–∑ –∏–∑ –ö–∏—Ç–∞—è.")
    elif text == "üì¶ –û–ø—Ç/–¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥":
        await update.message.reply_text("–û–ø—Ç/–¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é.")

async def catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == 'catalog_clothes':
        kb = [
            [InlineKeyboardButton("üëî –ú—É–∂—Å–∫–∞—è", url='https://t.me/shadychina_men')],
            [InlineKeyboardButton("üëó –ñ–µ–Ω—Å–∫–∞—è", url='https://t.me/shadychina_women')],
            [InlineKeyboardButton("üë∂ –î–µ—Ç—Å–∫–∞—è", url='https://t.me/shadychina_kids')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='catalog')]
        ]
        await q.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ —Å –æ–¥–µ–∂–¥–æ–π:", reply_markup=InlineKeyboardMarkup(kb))

    elif data == 'catalog_guarantee':
        await q.edit_message_text(
            "üõ°Ô∏è *–ì–∞—Ä–∞–Ω—Ç*
–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –ø—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞.
"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://t.me/shadychina_guarantee",
            parse_mode='Markdown'
        )

    elif data == 'catalog_order':
        kb = [
            [InlineKeyboardButton("1688", callback_data='plat_1688')],
            [InlineKeyboardButton("Taobao", callback_data='plat_taobao')],
            [InlineKeyboardButton("Poizon", callback_data='plat_poizon')],
            [InlineKeyboardButton("–î—Ä—É–≥–∏–µ", callback_data='plat_other')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='catalog')]
        ]
        await q.edit_message_text("–ó–∞–∫–∞–∑ –∏–∑ –ö–∏—Ç–∞—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=InlineKeyboardMarkup(kb))

    elif data.startswith('plat_'):
        platform = data.split('_')[1]
        await q.edit_message_text(
            f"–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω —á–µ—Ä–µ–∑ *{platform}*.
"
            "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–¥–µ—Å—å: https://t.me/shadychina_order_form",
            parse_mode='Markdown'
        )

    elif data == 'catalog_wholesale':
        await q.edit_message_text(
            "üì¶ *–û–ø—Ç/–¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥*
–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å.",
            parse_mode='Markdown'
        )

    elif data == 'back_main':
        await start(update, context)

    elif data == 'catalog':
        await handle_text(update, context)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(catalog_callback))
    app.run_polling()

if __name__ == '__main__':
    main()
